import json
import os
from pathlib import Path
from typing import Dict, List, Set, Any
from collections import defaultdict
from datetime import datetime

class ShortcutDocMaker:
    def __init__(self, db_file: str = "shortcuts_db.json"):
        self.db_file = db_file
        # Core data structures
        self.actions_db = defaultdict(list)  # Store action parameters
        self.metadata = defaultdict(set)     # Store metadata
        self.known_actions = set()           # Track unique actions
        self.new_actions = set()             # Track newly discovered actions
        
        # Enhanced tracking
        self.uuid_map = {}                   # Map UUIDs to actions
        self.group_map = defaultdict(list)   # Track action groups
        self.action_flows = defaultdict(list) # Track action sequences
        self.parameter_types = defaultdict(set) # Track parameter data types
        self.action_relationships = defaultdict(set) # Track related actions
        self.menu_structures = defaultdict(dict)    # Track menu hierarchies
        
        self.load_existing_data()
        
    def load_existing_data(self):
        """Load existing database if it exists."""
        if os.path.exists(self.db_file):
            print(f"Loading existing database from {self.db_file}")
            with open(self.db_file, 'r') as f:
                data = json.load(f)
                self.actions_db = defaultdict(list, data.get('actions_db', {}))
                self.metadata = defaultdict(set, {k: set(v) for k, v in data.get('metadata', {}).items()})
                self.known_actions = set(data.get('known_actions', []))
                self.uuid_map = data.get('uuid_map', {})
                self.group_map = defaultdict(list, data.get('group_map', {}))
                self.action_flows = defaultdict(list, data.get('action_flows', {}))
                self.parameter_types = defaultdict(set, {k: set(v) for k, v in data.get('parameter_types', {}).items()})
                self.action_relationships = defaultdict(set, {k: set(v) for k, v in data.get('action_relationships', {}).items()})
                self.menu_structures = defaultdict(dict, data.get('menu_structures', {}))
            print(f"Loaded {len(self.known_actions)} known actions")
        else:
            print("No existing database found. Creating new database.")

    def save_database(self):
        """Save current state to database file."""
        save_data = {
            'actions_db': dict(self.actions_db),
            'metadata': {k: list(v) for k, v in self.metadata.items()},
            'known_actions': list(self.known_actions),
            'uuid_map': self.uuid_map,
            'group_map': dict(self.group_map),
            'action_flows': dict(self.action_flows),
            'parameter_types': {k: list(v) for k, v in self.parameter_types.items()},
            'action_relationships': {k: list(v) for k, v in self.action_relationships.items()},
            'menu_structures': dict(self.menu_structures)
        }
        
        with open(self.db_file, 'w') as f:
            json.dump(save_data, f, indent=2)
        print(f"\nDatabase saved to {self.db_file}")

    def _process_action(self, action: Dict, action_index: int, total_actions: int) -> None:
        """Process a single action and its parameters."""
        identifier = action.get("WFWorkflowActionIdentifier")
        if not identifier:
            return
            
        # Track new actions with version info
        if identifier not in self.known_actions:
            self.new_actions.add(identifier)
            self.known_actions.add(identifier)
            # Store version information for this action
            if not hasattr(self, 'action_versions'):
                self.action_versions = defaultdict(set)
            self.action_versions[identifier].add(str(self.current_shortcut_version['client']))
            
        parameters = action.get("WFWorkflowActionParameters", {})
        
        # Track parameter types
        for param_key, param_value in parameters.items():
            param_type = type(param_value).__name__
            self.parameter_types[identifier].add(f"{param_key}: {param_type}")
            
        # Track UUIDs and GroupingIdentifiers
        uuid = parameters.get("UUID")
        group_id = parameters.get("GroupingIdentifier")
        
        if uuid:
            self.uuid_map[uuid] = identifier
        if group_id:
            self.group_map[group_id].append(identifier)
            
        # Track menu structures
        if identifier == "is.workflow.actions.choosefrommenu":
            menu_items = parameters.get("WFMenuItems", [])
            menu_prompt = parameters.get("WFMenuPrompt", "")
            self.menu_structures[group_id] = {
                "prompt": menu_prompt,
                "items": menu_items
            }
            
        # Track action flows (what actions typically follow this one)
        if action_index < total_actions - 1:
            next_action = action.get("WFWorkflowActionIdentifier")
            if next_action:
                self.action_flows[identifier].append(next_action)
                
        # Store unique parameter combinations
        param_str = json.dumps(parameters, sort_keys=True)
        if param_str not in [json.dumps(p, sort_keys=True) for p in self.actions_db[identifier]]:
            self.actions_db[identifier].append(parameters)

    def _process_shortcut_file(self, file_path: Path) -> None:
        """Process a single shortcut file."""
        with open(file_path, 'r') as f:
            data = json.load(f)
            
        # Extract version information
        self.current_shortcut_version = {
            'minimum': data.get('WFWorkflowMinimumClientVersion'),
            'minimum_string': data.get('WFWorkflowMinimumClientVersionString'),
            'client': data.get('WFWorkflowClientVersion')
        }
        
        # Extract metadata
        self._extract_metadata(data)
        
        # Process actions
        actions = data.get("WFWorkflowActions", [])
        total_actions = len(actions)
        for index, action in enumerate(actions):
            self._process_action(action, index, total_actions)

    def generate_documentation(self, output_file: str, format: str = "markdown") -> None:
        """Generate comprehensive API-style documentation."""
        # Check if file exists and load existing content
        existing_content = {}
        if os.path.exists(output_file):
            with open(output_file, 'r') as f:
                content = f.read()
                # Parse existing content into sections
                sections = content.split('\n## ')
                for section in sections:
                    if ':' in section:
                        title, data = section.split('\n', 1)
                        existing_content[title.strip('# ')] = data

        with open(output_file, 'w') as f:
            # Write header
            f.write("# Apple Shortcuts Documentation\n\n")
            
            # Update Overview section
            f.write("## Overview\n\n")
            f.write(f"Last Updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"Total Actions: {len(self.known_actions)}\n")
            f.write(f"Total Parameter Variations: {sum(len(v) for v in self.actions_db.values())}\n\n")
            
            # Update Metadata section with new data
            self._write_metadata_section(f, existing_content.get('Metadata', ''))
            
            # Update Actions section incrementally
            self._write_actions_section(f, existing_content.get('Actions', ''))
            
            # Update Menu Structures section
            self._write_menu_section(f, existing_content.get('Menu Structures', ''))

def main():
    # Initialize the documentation maker
    doc_maker = ShortcutDocMaker()
    
    while True:
        print("\nOptions:")
        print("1. Process single file")
        print("2. Process directory")
        print("3. View database stats")
        print("4. Generate documentation")
        print("5. Exit")
        
        choice = input("\nEnter your choice (1-5): ")
        
        if choice == "1":
            file_path = input("Enter path to shortcut JSON file: ")
            results = doc_maker.process_input(file_path)
        elif choice == "2":
            dir_path = input("Enter path to directory containing shortcuts: ")
            results = doc_maker.process_input(dir_path)
        elif choice == "3":
            print(f"\nDatabase Statistics:")
            print(f"Total unique actions: {len(doc_maker.known_actions)}")
            print(f"Total metadata keys: {len(doc_maker.metadata)}")
            print(f"Total menu structures: {len(doc_maker.menu_structures)}")
            print(f"Total action relationships: {len(doc_maker.action_relationships)}")
            continue
        elif choice == "4":
            output_file = input("Enter output file name (default: shortcuts_documentation.md): ") or "shortcuts_documentation.md"
            doc_maker.generate_documentation(output_file)
            print(f"Documentation generated: {output_file}")
        elif choice == "5":
            break
        else:
            print("Invalid choice. Please try again.")
            continue
            
        if "results" in locals():
            print("\nProcessing Summary:")
            print(f"Files processed: {len(results['processed_files'])}")
            print(f"New actions discovered: {len(results['new_actions'])}")
            if results['new_actions']:
                print("\nNewly discovered actions:")
                for action in sorted(results['new_actions']):
                    print(f"- {action}")
            if results['errors']:
                print("\nErrors encountered:")
                for error in results['errors']:
                    print(f"- {error}")
                    
        # Save after each successful operation
        doc_maker.save_database()

if __name__ == "__main__":
    main()
